@IsTest
private class MaintenanceRequestTriggerTest {
    
    @IsTest
    static void testPositive() {
        // Positive test case: create a maintenance request that should trigger a work order
        
        // Create a test vehicle and equipment
        Vehicle__c testVehicle = new Vehicle__c(Name = 'Test Vehicle');
        insert testVehicle;
        
        Equipment__c testEquipment = new Equipment__c(Name = 'Test Equipment');
        insert testEquipment;
        
        // Create a maintenance request related to the vehicle and equipment
        Maintenance_Request__c testRequest = new Maintenance_Request__c(
            Name = 'Test Request',
            Vehicle__c = testVehicle.Id,
            Equipment__c = testEquipment.Id,
            Due_Date__c = Date.today()
        );
        insert testRequest;
        
        // Assert that a work order was created for the maintenance request
        List<WorkOrder> workOrders = [SELECT Id FROM WorkOrder WHERE Maintenance_Request__c = :testRequest.Id];
        System.assertEquals(1, workOrders.size(), 'A work order should have been created for the maintenance request.');
    }
    
    @IsTest
    static void testNegative() {
        // Negative test case: create a maintenance request that should not trigger a work order
        
        // Create a test vehicle and equipment
        Vehicle__c testVehicle = new Vehicle__c(Name = 'Test Vehicle');
        insert testVehicle;
        
        Equipment__c testEquipment = new Equipment__c(Name = 'Test Equipment');
        insert testEquipment;
        
        // Create a maintenance request related to the vehicle and equipment, but with an empty due date
        Maintenance_Request__c testRequest = new Maintenance_Request__c(
            Name = 'Test Request',
            Vehicle__c = testVehicle.Id,
            Equipment__c = testEquipment.Id
        );
        insert testRequest;
        
        // Assert that no work orders were created for the maintenance request
        List<WorkOrder> workOrders = [SELECT Id FROM WorkOrder WHERE Maintenance_Request__c = :testRequest.Id];
        System.assertEquals(0, workOrders.size(), 'No work orders should have been created for the maintenance request.');
    }
    
    @IsTest
    static void testLargeDataVolume() {
        // Test case with a large data volume: create 300 maintenance requests and assert that they were all processed
        
        // Create test vehicle and equipment
        Vehicle__c testVehicle = new Vehicle__c(Name = 'Test Vehicle');
        insert testVehicle;
        
        Equipment__c testEquipment = new Equipment__c(Name = 'Test Equipment');
        insert testEquipment;
        
        // Create 300 maintenance requests related to the vehicle and equipment
        List<Maintenance_Request__c> testRequests = new List<Maintenance_Request__c>();
        for (Integer i = 0; i < 300; i++) {
            Maintenance_Request__c testRequest = new Maintenance_Request__c(
                Name = 'Test Request ' + i,
                Vehicle__c = testVehicle.Id,
                Equipment__c = testEquipment.Id,
                Due_Date__c = Date.today()
            );
            testRequests.add(testRequest);
        }
        insert testRequests;
        
        // Assert that a work order was created for each maintenance request
        Integer expectedCount = testRequests.size();
        List<WorkOrder> workOrders = [SELECT Id FROM WorkOrder WHERE Maintenance_Request__c IN :testRequests];
        System.assertEquals(expectedCount, workOrders.size(), 'A work order should have been created for each maintenance request.');
    }
}

